import OneSignal from 'react-native-onesignal';

import React from 'react';
import Share from 'react-native-share';
import SplashScreen from 'react-native-splash-screen';
import {WebView} from 'react-native-webview';
import {
  View,
  ActivityIndicator,
  Text,
  Button,
  Image,
  TouchableOpacity,
  AsyncStorage,
  Modal,
  Alert,
} from 'react-native';
/* import RNFetchBlob from 'rn-fetch-blob'; */

/* var RNFS = require('react-native-fs'); */
import Geolocation from 'react-native-geolocation-service';
/* import BottomModal, {ModalContent} from 'react-native-modals';
import StaticServer from 'react-native-static-server'; */
import {PermissionsAndroid} from 'react-native';
/* import {zip, unzip, unzipAssets, subscribe} from 'react-native-zip-archive'; */
import axios from 'axios';
import Backbutton from './back-button.png';

class MainApp extends React.Component {
  constructor(properties) {
    super(properties);

    let requiresConsent = false;

    this.state = {
      requirePrivacyConsent: requiresConsent,
      renderedOnce: false,
      feedtitle: false,
      visible: false,
      loading: false,
      downloading: false,
      updated: false,
      urlloading: true,
      modalToShow: false,
      firstTimeOpen: false,
      navigateToNotification: false,
      id: false,
      tokenexist: false,
      sendtokenexist: false,
      location: '',
      sendlocation: false,
      notification: false,
      showbackbutton: false,
      urltoshow: false,
    };
    let directory = false;

    // On Android, use "RNFS.DocumentDirectoryPath" (MainBundlePath is not defined)

    //OneSignal.setRequiresUserPrivacyConsent(requiresConsent);
    //OneSignal.init('d29eec76-52f0-4490-b2bb-21422ce86efe', {
    //  kOSSettingsKeyAutoPrompt: true,
    //});

  ///  OneSignal.setLogLevel(6, 0);
    //this.getLocationPermission();
    //  this.startServer();
  }

  shareLink(url, message) {
    Share.open({url, message})
      .then(res => {
        console.log(res);
      })
      .catch(err => {
        err && console.log(err);
      });
  }

  /*  async updateBuild() {
    try {
      console.log('updating build');
      // await RNFS.unlink(`${RNFS.DocumentDirectoryPath}/build.zip`);

      let res = await RNFetchBlob.config({
        // add this option that makes response data to be stored as a file,
        // this is much more performant.
        fileCache: true,
      }).fetch('GET', 'https://nationalflightops.com/uploads/build.zip');
      console.log('path', res.path());
      console.log('file downloaded');

      //console.log('before copy', buildFilesBefore);
      await unzip(res.path(), `${RNFS.DocumentDirectoryPath}/www/`);

      let versionFromServer = await axios.get(
        'http://nationalflightops.com/getupdate.php',
      );
      await AsyncStorage.setItem(
        'version',
        versionFromServer.data.isUpdate.toString(),
      );
    } catch (err) {
      console.log(err);
    }
  } */
  /*
  async showUpdateDialog() {
    try {
      console.log('going to download');
      this.setState({downloading: true});
      await this.updateBuild();
      this.setState({downloading: false, visible: false});
    } catch (err) {
      console.log(err);
    }
  } */

  /*  async checkForUpdate() {
    try {
      console.log('checking for update');
      let versionFromServer = await axios.get(
        'http://nationalflightops.com/getupdate.php',
      );
      console.log(versionFromServer.data);
      let version = await AsyncStorage.getItem('version');
      if (version) {
        console.log('version found');
        if (versionFromServer.data.isUpdate.toString() > version.toString()) {
          console.log('showing modal');
          this.setState({modalToShow: true});
        } else {
          console.log('upto date');
        }
      } else {
        console.log('version not found');
        this.setState({firstTimeOpen: true});
      }
    } catch (err) {
      console.log(err);
    }
  }
 */
  /*  async startServer() {
    try {
      // await RNFS.unlink(`${RNFS.DocumentDirectoryPath}/www/`);
      let exists = await RNFS.exists(`${RNFS.DocumentDirectoryPath}/www/`);
      console.log('inside start server');
      if (exists) {
        console.log('file exist');
        let files = await RNFS.readdir(
          `${RNFS.DocumentDirectoryPath}/www/build/static/js`,
        );
        let file = await RNFS.readFile(
          `${RNFS.DocumentDirectoryPath}/www/build/index.html`,
          'utf8',
        );
        let index = file.indexOf('<head>');
        let start = file.slice(0, index + 6);
        let end = file.slice(index + 6);
        let fileToWrite = `${start}<script>window.chunkURL="http://localhost/data/build/"</script>${end}`;
        await RNFS.writeFile(
          `${RNFS.DocumentDirectoryPath}/www/build/index.html`,
          fileToWrite,
          'utf8',
        );
        console.log(start);
        console.log(end);
        console.log(file);
        console.log(fileToWrite);
        this.setState({loading: false});
        this.checkForUpdate();
      } else {
        console.log('file not exist');
        await RNFS.mkdir(`${RNFS.DocumentDirectoryPath}/www/`);
        //let assets = await RNFS.readDirAssets('/res');
        await RNFS.copyFileAssets(
          'build/build.zip',
          `${RNFS.DocumentDirectoryPath}/build.zip`,
        );
        let buildFiles = await RNFS.readdir(`${RNFS.DocumentDirectoryPath}`);
        console.log('not Exist', buildFiles);

        await unzip(
          `${RNFS.DocumentDirectoryPath}/build.zip`,
          `${RNFS.DocumentDirectoryPath}/www/`,
        );
        this.setState({loading: false});
        this.checkForUpdate();
      }
    } catch (err) {
      console.log('AN errror occure', err);
    }
  }
 */
  async getLocationPermission() {
    console.log('get location');
    try {
      const hasPermission = await PermissionsAndroid.check(
        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
      );
      console.log('haspermisison', hasPermission);
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
        {
          title: 'Cool Photo App Camera Permission',
          message:
            'Cool Photo App needs access to your camera ' +
            'so you can take awesome pictures.',
          buttonNeutral: 'Ask Me Later',
          buttonNegative: 'Cancel',
          buttonPositive: 'OK',
        },
      );
      console.log(granted);
      if (granted === PermissionsAndroid.RESULTS.GRANTED) {
        console.log('You can use the camera');
        Geolocation.getCurrentPosition(
          position => {
            console.log(position);

            axios
              .get(
                `http://www.mapquestapi.com/geocoding/v1/reverse?key=CQHkMsBnxMZsth601EAdD5sTpdYTK3ll&location=30.333472,-81.470448&includeRoadMetadata=true&includeNearestIntersection=true`,
              )
              .then(res => {
                let location = `${res.data.results[0].locations[0].adminArea5}, ${res.data.results[0].locations[0].adminArea3}, ${res.data.results[0].locations[0].adminArea1}`;
                console.log(location);
                this.setState({
                  location: location,
                  sendlocation: true,
                });
              })
              .catch(err => {
                this.setState({
                  location: false,
                  sendlocation: true,
                });
                console.log(err);
              });
          },
          error => {
            // See error code charts below.
            console.log(error.code, error.message);
            this.setState({
              location: false,
              sendlocation: true,
            });
          },
          {enableHighAccuracy: true, timeout: 15000, maximumAge: 10000},
        );
      } else {
        this.setState({
          location: false,
          sendlocation: true,
        });
      }
    } catch (err) {
      console.warn(err);
    }
  }

  async componentDidMount() {
  //  SplashScreen.hide();
    //await this.getLocationPermission();
    //var providedConsent = await OneSignal.userProvidedPrivacyConsent();
  //  await OneSignal.setEmail('rahulkumar12kkp@gmail.com');
//    this.onReceived = this.onReceived.bind(this);
  //  this.onOpened = this.onOpened.bind(this);
  //  this.onIds = this.onIds.bind(this);

  //  OneSignal.addEventListener('received', this.onReceived);
  //  OneSignal.addEventListener('opened', this.onOpened);
  //  OneSignal.addEventListener('ids', this.onIds);
  }

  componentWillUnmount() {
  //  OneSignal.removeEventListener('received', this.onReceived);
  //  OneSignal.removeEventListener('opened', this.onOpened);
//    OneSignal.removeEventListener('ids', this.onIds);
  }

  onReceived(notification) {
    console.log('Notification received: ', notification);

    this.setState({
      jsonDebugText: 'RECEIVED: \n' + JSON.stringify(notification, null, 2),
    });
  }

  onOpened(openResult) {
    console.log('refffffff', this.myRef);
    console.log('Message: ', openResult.notification.payload.body);

    this.setState({
      notification: openResult.notification.payload.additionalData.en,
      navigateToNotification: true,
    });
    console.log('Data: ', openResult.notification.payload.additionalData.en);
    console.log('isActive: ', openResult.notification.isAppInFocus);
    console.log('openResult: ', openResult);
  }

  onIds(device) {
    console.log('Device info: ', device);
    this.setState({id: device.userId});
    axios
      .get(
        `https://api.buzzraker.com/savepushtoken?pushtoken=${device.userId}`,
        {
          pushtoken: device.userId,
        },
      )
      .then(res => {
        if (res.data == 'True' || res.data == true) {
          this.setState({tokenexist: true});
        } else {
          this.setState({tokenexist: false});
        }
      })
      .catch(err => console.log(err));
  }

  hideSpinner() {
    this.setState({visible: false});
  }

  updateSource = () => {
    this.setState({renderedOnce: true});
  };
  disableNotification() {
    console.log('disabling notification');
    axios
      .get(
        `https://api.buzzraker.com/disablepushtoken?pushtoken=${this.state.id}`,
      )
      .then(res => {
        this.setState({tokenexist: false});
      })
      .catch(err => console.log(err));
  }
  enableNotification() {
    console.log('enable notification');

    axios
      .get(
        `https://api.buzzraker.com/enablepushtoken?pushtoken=${this.state.id}`,
      )
      .then(res => {
        this.setState({tokenexist: true});
      })
      .catch(err => console.log(err));
  }

  render() {
    if (this.state.loading) {
      return <ActivityIndicator />;
    }
    console.log('this.state.sendlocation', this.state.sendlocation);
    console.log(
      'this.state.sendnotificatiuon',
      this.state.navigateToNotification,
    );
    console.log('fwejklfe', this.state.navigateToNotification);
    if (this.state.navigateToNotification) {
      if (this.state.notification) {
        let run = `
        var event = new CustomEvent('check', {detail:"${this.state.notification}"});
        document.dispatchEvent(event);
        true;
      `;

        this.webref.injectJavaScript(run);
      }

      this.setState({navigateToNotification: false, notification: false});
    }
    if (this.state.sendtokenexist) {
      console.log('sending token exist');
      let run = `
      var event = new CustomEvent('checktoken', {detail:"${this.state.tokenexist}"});
      document.dispatchEvent(event);
      true;
    `;
      this.webref.injectJavaScript(run);
      this.setState({sendtokenexist: false});
    }
    if (this.state.sendlocation) {
      console.log('sending location exist');
      let run = `
      var event = new CustomEvent('location', {detail:"${this.state.location}"});
      document.dispatchEvent(event);
      true;
    `;
      this.webref.injectJavaScript(run);
      this.setState({sendlocation: false});
    }
    return (
      <View style={{flex: 1}}>
        <View style={{flex: 1}}>
          <WebView
            onNavigationStateChange={navState => {
              console.log(navState);
              if (
                navState.url.indexOf('cnn') >= 0 ||
                navState.url.indexOf('espn') >= 0 ||
                navState.url.indexOf('fox') >= 0 ||
                navState.url.indexOf('twitter') >= 0
              ) {
                if (!this.state.showbackbutton) {
                  this.setState({
                    showbackbutton: true,
                    urltoshow: navState.url,
                  });
                }
              } else {
                this.setState({showbackbutton: false, urltoshow: false});
              }
              // Keep track of going back navigation within component
              this.canGoBack = navState.canGoBack;
            }}
            nativeConfig={{props: {webContentsDebuggingEnabled: true}}}
            ref={r => (this.webref = r)}
            onMessage={event => {
              let data = event.nativeEvent.data.split(':');
              console.log(data);
              if (data[0] == 'url')
                this.shareLink(`https://buzzraker.com/${data[1]}`, data[2]);
              if (data[0] == 'tokenexist') {
                console.log('tokenexist called');
                this.setState({sendtokenexist: true});
              }
              if (data[0] == 'enableepush') {
                this.enableNotification();
              }
              if (data[0] == 'disablepush') {
                this.disableNotification();
              }
              if (data[0] == 'getLocation') {
                this.getLocationPermission();
              }
              if (data[0] == 'getNotification') {
                this.setState({navigateToNotification: true});
              }
              if (data[0] == 'showmodal') {
                this.setState({
                  showbackbutton: true,
                  urltoshow: `${data[1]}:${data[2]}`,
                });
              }
            }}
            allowFileAccess={true}
            originWhitelist={['*']}
            allowFileAccessFromFileURLs={true}
            allowUniversalAccessFromFileURLs={true}
            userAgent="buzzrakerapp"
            allowingReadAccessToURL={true}
            allowFileAccess={true}
            source={{
              uri: `https://buzzraker.com`,
            }}
          />

          <Modal
            animationType="slide"
            transparent={false}
            visible={this.state.showbackbutton}
            onRequestClose={() => {
              Alert.alert('Modal has been closed.');
            }}>
            <View style={{flex: 1}}>
              <View
                style={{
                  padding: 15,
                  backgroundColor: '#ddd',
                  flexDirection: 'row',
                }}>
                <TouchableOpacity
                  onPress={() => {
                    this.setState({showbackbutton: false, url: false});
                  }}>
                  <View
                    style={{
                      borderRightWidth: 1,
                      borderRightColor: '#000',
                      paddingRight: 10,
                    }}>
                    <Image source={Backbutton} />
                  </View>
                </TouchableOpacity>
                <View style={{flex: 1, paddingLeft: 10}}>
                  <Text>{this.state.urltoshow}</Text>
                </View>
              </View>
              <View style={{flex: 1}}>
                <WebView
                  originWhitelist={['*']}
                  source={{uri: this.state.urltoshow}}
                />
              </View>
            </View>
          </Modal>
        </View>
      </View>
    );
  }
}

export default MainApp;
/* file://${RNFS.DocumentDirectoryPath}/www/build/index.html */
